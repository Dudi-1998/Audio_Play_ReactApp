{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Audio-React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport Playlist from \"./Playlist\";\nimport Visualizer from \"./Visualizer\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  useEffect(() => {\n    const storedPlaylist = JSON.parse(localStorage.getItem(\"playlist\"));\n    if (storedPlaylist) {\n      setPlaylist(storedPlaylist);\n    }\n  }, []);\n\n  // const handleFileChange = (e) => {\n  //   const files = e.target.files;\n  //   const updatedPlaylist = [];\n\n  //   for (let i = 0; i < files.length; i++) {\n  //     const file = files[i];\n  //     const fileURL = URL.createObjectURL(file);\n\n  //     // Use the original file name\n  //     const originalFileName = file.name;\n\n  //     // Update the playlist with the original file URL and name\n  //     updatedPlaylist.push({ url: fileURL, name: originalFileName });\n  //   }\n\n  //   setPlaylist(updatedPlaylist);\n  //   localStorage.setItem(\"playlist\", JSON.stringify(updatedPlaylist));\n  // };\n  const handleFileChange = e => {\n    const files = e.target.files;\n    const newPlaylist = Array.from(files).map(file => ({\n      name: file.name,\n      url: URL.createObjectURL(file)\n    }));\n    setPlaylist(newPlaylist);\n    localStorage.setItem(\"playlist\", JSON.stringify(newPlaylist));\n  };\n  const playSong = url => {\n    setCurrentSong(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".mp3\",\n      onChange: handleFileChange,\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multimedia\",\n      children: [/*#__PURE__*/_jsxDEV(Playlist, {\n        songs: playlist,\n        onSongSelect: url => playSong(url)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), currentSong && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(Visualizer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n          currentSong: currentSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"cv6gfcmIUkzgC5OX7QegugjzJok=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AudioPlayer","Playlist","Visualizer","jsxDEV","_jsxDEV","App","_s","playlist","setPlaylist","currentSong","setCurrentSong","storedPlaylist","JSON","parse","localStorage","getItem","handleFileChange","e","files","target","newPlaylist","Array","from","map","file","name","url","URL","createObjectURL","setItem","stringify","playSong","className","children","type","accept","onChange","multiple","fileName","_jsxFileName","lineNumber","columnNumber","songs","onSongSelect","_c","$RefreshReg$"],"sources":["D:/Web Development/Audio-React/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport Playlist from \"./Playlist\";\nimport Visualizer from \"./Visualizer\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  useEffect(() => {\n    const storedPlaylist = JSON.parse(localStorage.getItem(\"playlist\"));\n    if (storedPlaylist) {\n      setPlaylist(storedPlaylist);\n    }\n  }, []);\n\n  // const handleFileChange = (e) => {\n  //   const files = e.target.files;\n  //   const updatedPlaylist = [];\n\n  //   for (let i = 0; i < files.length; i++) {\n  //     const file = files[i];\n  //     const fileURL = URL.createObjectURL(file);\n\n  //     // Use the original file name\n  //     const originalFileName = file.name;\n\n  //     // Update the playlist with the original file URL and name\n  //     updatedPlaylist.push({ url: fileURL, name: originalFileName });\n  //   }\n\n  //   setPlaylist(updatedPlaylist);\n  //   localStorage.setItem(\"playlist\", JSON.stringify(updatedPlaylist));\n  // };\n  const handleFileChange = (e) => {\n    const files = e.target.files;\n    const newPlaylist = Array.from(files).map((file) => ({\n      name: file.name,\n      url: URL.createObjectURL(file),\n    }));\n    setPlaylist(newPlaylist);\n    localStorage.setItem(\"playlist\", JSON.stringify(newPlaylist));\n  };\n  const playSong = (url) => {\n    setCurrentSong(url);\n  };\n\n  return (\n    <div className=\"app\">\n      <input type=\"file\" accept=\".mp3\" onChange={handleFileChange} multiple />\n      <div className=\"multimedia\">\n        <Playlist songs={playlist} onSongSelect={(url) => playSong(url)} />\n        {currentSong && (\n          <div className=\"player\">\n            <Visualizer />\n            <AudioPlayer currentSong={currentSong} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}